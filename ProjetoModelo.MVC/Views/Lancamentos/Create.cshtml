@model Moneta.Application.ViewModels.LancamentoViewModel
@using System.Web.Mvc
@using Moneta.Application.ViewModels;
@using Moneta.Infra.CrossCutting.Enums;

@{
    ViewBag.Title = "Novo Lançamento";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "formLancamento" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

@{
    var cor = "lightcoral";
    if (Model.TipoDeTransacao == TipoTransacaoEnum.Receita)
    {
        cor = "lightgreen";
    }
}

        <div class="form-group">
            <div class="control-label col-md-2"></div>
            <div class="col-md-3">
                <h3><span class="label" style="display:block; background-color: @cor">@Model.TipoDeTransacao</span></h3>
                @Html.HiddenFor(model => model.TipoDeTransacao)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Conta, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                <span style="vertical-align: -30%">@Html.DisplayFor(model => model.Conta.Descricao)</span> 
                @Html.HiddenFor(model => model.ContaId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Descricao, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descricao, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Valor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Valor, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Valor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataVencimento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataVencimento, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.DataVencimento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Categoria, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CategoriaId", (SelectList)@ViewBag.Categorias, String.Empty, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoriaId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    
    <div class="form-horizontal">
        <hr />
        <div class="form-group" id="botaoRepetir">
            <div class="control-label col-md-2"></div>
            <div class="col-md-10">
                <a href="javascript:mostrarLancamentoParcelado();" class="btn btn-default" title="Repetir @Model.TipoDeTransacao">
                    <i class="glyphicon glyphicon-retweet"></i>
                </a>
            </div>
        </div>
        <div class="form-horizontal">
            <div class="hidden" id="divLancamentoParcelado">
                <div class="form-group">
                    <div class="control-label col-md-2"></div>
                    <div class="col-md-10">
                        <p>
                            <input type="radio" id="repetir_fixo" name="LancamentoParcelado.TipoDeRepeticao" value="@TipoRepeticao.Fixo" onclick="javascript: selecionouLancamentosFixos();" /> É um lançamento fixo
                        </p>
                        <p>
                            <input type="radio" id="repetir_parcelado" name="LancamentoParcelado.TipoDeRepeticao" value="@TipoRepeticao.Parcelado" onclick="javascript: selecionouLancamentosParcelados();" /> É um lançamento parcelado
                        </p>
                    </div>
                </div>
                <div class="form-group hidden" id="divNumeroParcelas">
                    @Html.LabelFor(model => model.LancamentoParcelado.NumeroParcelas, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input class="form-control text-box single-line" type="text" id="LancamentoParcelado_NumeroParcelas" name="LancamentoParcelado.NumeroParcelas" />
                        @Html.ValidationMessageFor(model => model.LancamentoParcelado.NumeroParcelas, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group hidden" id="divPeriodicidade">
                    @Html.LabelFor(model => model.LancamentoParcelado.Periodicidade, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.LancamentoParcelado.Periodicidade, "-- Selecione a Periodicidade --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LancamentoParcelado.Periodicidade, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input value="Criar" class="btn btn-default" onclick="javascript: validarLancamentoParcelado();" />
                    <input value="Cancelar" class="btn btn-default" onclick="javascript: window.history.back();" />
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/lancamento-parcelado")
    @Scripts.Render("~/bundles/mask-money")

    <script>
        $(function () { // will trigger when the document is ready
            $('.datepicker').datepicker('setDate', new Date('@Model.DataVencimento.ToString("MM/dd/yyyy")'));
        });

        $(function () {
            $('#Valor').maskMoney({ prefix: 'R$ ', allowNegative: true, thousands: '', decimal: ',', affixesStay: false });
        })
    </script>
}